name: Release Drafter

on:
  push:
    branches:
      - main
      - release
      - test

permissions:
  contents: write
  pull-requests: write

jobs:
  Release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: |
          echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
          echo "THIS IS NOT A PR"

      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: |
          echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV
          echo "THIS IS A PR"

      - name: Debug
        run: echo ${{ env.BRANCH_NAME }}

      # - name: Get the git log
      #   uses: ./.github/actions/diff-log-parser # Uses an action in the root directory
      #   id: logs
      # # Use the output from the `hello` step

      # - name: Echo commits
      #   run: echo "The commits are ${{ steps.logs.outputs.commits }}"

      - name: Get before commit
        id: before
        run: |
          echo "::set-output name=before::$(git rev-parse HEAD~1)"

      - name: Get after commit
        id: after
        run: |
          echo "::set-output name=after::$(git rev-parse HEAD)"

      - name: git log in github env
        run: |
          MY_STRING=$(git log --pretty=format:"%B" ${{ steps.before.outputs.before }}..${{ steps.after.outputs.after }} | sed -e ':a;N;$!ba;s/\n/\\n/g')
          echo "MY_STRING<<EOF" >> $GITHUB_ENV
          echo "$MY_STRING" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "GIT_LOG=" >> $GITHUB_ENV

      - name: Send custom JSON data to Slack workflow
        id: slack
        uses: slackapi/slack-github-action@v1.18.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ env.MY_STRING }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_TEST_HOOK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
