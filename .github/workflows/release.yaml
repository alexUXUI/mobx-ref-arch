name: Release Drafter

on:
  push:
    branches:
      - main
      - release
      - test

permissions:
  contents: write
  pull-requests: write

jobs:
  # GitLogs:
  #   runs-on: ubuntu-latest
  #   name: A job to say hello
  #   steps:
  #     # To use this repository's private action,
  #     # you must check out the repository
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - name: Get the git log
  #       uses: ./.github/actions/diff-log-parser # Uses an action in the root directory
  #       id: logs
  #     # Use the output from the `hello` step
  #     - name: Get the logs
  #       run: echo "The logs are ${{ steps.logs.outputs.log }}"

  #     - name: Echo previous tag
  #       run: echo "The previous tag is ${{ steps.logs.outputs.previousTag }}"

  #     - name: Echo markdownLog
  #       run: echo "The markdown is ${{ steps.logs.outputs.markdownLog }}"

  # Git_Log_JSON:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0

  #     - name: set JSON output
  #       id: git_log_json
  #       run: |
  #         echo "::set-output name=git_log_json::$(git --no-pager log --pretty=format:'{"commit":"%H","author":"%an","date":"%ad","message":"%s"},' --date=short)"

  # Echo_Git_Log_JSON:
  #   needs: Git_Log_JSON
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Echo Git Log JSON
  #       run: |
  #         echo ${{ needs.Git_Log_JSON.outputs.git_log_json }}

  # Show_Author:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - name: show author
  #       run: git --no-pager show -s --format=%an | less -F

  # Get_Author:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - name: Get author name
  #       id: author
  #       run: echo "::set-output name=author::$(git show -s --format=%an | less -F)"

  # Echo_Author:
  #   runs-on: ubuntu-latest
  #   needs: Get_Author
  #   steps:
  #     - name: Echo author name
  #       run: echo ${{ needs.Get_Author.outputs.author }}

  # Rando:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Set the value
  #       id: step_one
  #       run: echo "action_state=yellow" >> $GITHUB_ENV

  #     - name: Use the value
  #       id: step_two
  #       run: echo "${{ env.action_state }}" # This will output 'yellow'

  # Generate_Git_Log_Output:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - name: Generate Git Log Output
  #       id: git_log
  #       run: |
  #         MY_VAR=$(git --no-pager log ${{ github.event.after }}...${{ github.event.before }})
  #         echo "output=MY_VAR" >> $GITHUB_ENV
  #         echo "::set-output name=outdated::$MY_VAR"

  # Echo_Git_Log_Output:
  #   runs-on: ubuntu-latest
  #   needs: Generate_Git_Log_Output
  #   steps:
  #     - name: Echo Git Log Output
  #       run: |
  #         echo "${{ env.output }}"
  #         echo "${{ needs.Generate_Git_Log_Output.outputs.outdated }}"

  # Generate_Diff:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - name: Generate Diff
  #       run: |
  #         echo git --no-pager log ${{ github.event.after }}...${{ github.event.before }} --pretty=format:'%s' --reverse

  # Compare_Before_And_After_Commits:
  #   needs: Generate_Diff
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - name: Compare Before And After Commits
  #       id: compare
  #       run: |
  #         echo "::set-output name=diff::$(git log ${{ github.event.after }}...${{ github.event.before }})"

  # Echo_Commits:
  #   runs-on: ubuntu-latest
  #   needs: Compare_Before_And_After_Commits
  #   steps:
  #     - name: Echo Commits
  #       run: |
  #         echo ${{ needs.Compare_Before_And_After_Commits.outputs.diff }}

  # Dump_Action_Environment:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Dump GitHub Action Environment
  #       env:
  #         GITHUB_CONTEXT: ${{ toJson(github) }}
  #       run: echo "$GITHUB_CONTEXT"

  Parse_Version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.parse.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Parse package version
        id: parse
        run: |
          echo "::set-output name=version::$(npm pkg get version)"

  # EchoGitLogs:
  #   needs: Parse_Version
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - name: Echo Git Logs
  #       run: |
  #         echo ${{ steps.logs.outputs.log }}

  Release:
    needs: Parse_Version
    runs-on: ubuntu-latest

    steps:
      # To use this repository's private action,
      # you must check out the repository
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get the git log
        uses: ./.github/actions/diff-log-parser # Uses an action in the root directory
        id: logs
      # Use the output from the `hello` step
      - name: Get the logs
        run: echo "The logs are ${{ steps.logs.outputs.log }}"

      # - name: Echo previous tag
      #   run: echo "The previous tag is ${{ steps.logs.outputs.previousTag }}"

      # - name: Echo markdownLog
      #   run: echo "The markdown is ${{ steps.logs.outputs.markdownLog }}"

      - name: Send custom JSON data to Slack workflow
        id: slack
        uses: slackapi/slack-github-action@v1.18.0
        with:
          # For posting a rich message using Block Kit
          # try it out here: https://app.slack.com/block-kit-builder/
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<${{ github.event.pull_request.html_url || github.event.head_commit.url }}|View the PR>"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ${{ steps.logs.outputs.log }}
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_TEST_HOOK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
