name: PR Workflow CI

on: pull_request

jobs:
  # create two jobs. The first job produces some output and the second job uses that output

  parse_commits:
    runs-on: ubuntu-latest
    outputs:
      # Define the output variable
      commits: ${{ steps.parse.outputs.commits }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Parse commits
        id: parse
        run: |
          # Parse the commits and output the result
          echo "::set-output name=commits::$(git log --pretty="%h|%s|%aN|%aE|%aD" --no-merges)"

  echo_commits:
    runs-on: ubuntu-latest
    needs: parse_commits
    steps:
      - name: Echo commits
        run: |
          # Use the output from the previous job
          echo "${{ join(needs.parse_commits.outputs.commits) }}"

  Release:
    needs: [parse_commits, echo_commits]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'

        # echo the output of the preivous step
        # - name: Print commits relative to target
        #   run: |
        #     echo "${{ needs.GetCommitsRelativeToTarget.outputs.commits }}"

        # - name: Print the commit messsages from the previous step
        # run: |
        # echo "${{ GetCommitsRelativeToTarget.get-commits-relative-to-target.outputs.commits }}"

        name: Send custom JSON data to Slack workflow
        id: slack
      - uses: slackapi/slack-github-action@v1.18.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Feature branch: ${{ github.event.pull_request.head.ref }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Target branch: ${{ github.event.pull_request.base.ref }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
