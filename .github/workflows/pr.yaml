name: PR Workflow CI

on: pull_request

jobs:
  # Commits:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: '0'
  #     ## parse the git commits to json and set the json as an output using shell script
  #     - name: Parse git commits
  #       id: parse-git-commits
  #       run: |
  #         echo "::set-output name=commits::$(git log --pretty="%h|%s|%aN|%aE|%aD" --no-merges -n 1)"
  #     ## print the output
  #     - name: Print git commits
  #       run: |
  #         echo "${{ steps.parse-git-commits.outputs.commits }}"

  GetCommitsRelativeToTarget:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Get commits relative to target
        id: get-commits-relative-to-target
        run: |
          echo "::set-output name=commits::$(git log --pretty="%h|%s|%aN|%aE|%aD" --no-merges origin/${{ github.base_ref }}..HEAD)"
      - name: Print commits relative to target
        run: |
          echo "${{ steps.get-commits-relative-to-target.outputs.commits }}"

  Release:
    needs: GetCommitsRelativeToTarget
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      # echo the output of the preivous step
      - name: Print commits relative to target
        run: |
          echo "${{ needs.GetCommitsRelativeToTarget.outputs.commits }}"

      - name: Print the commit messsages from the previous step
        run: |
          echo "${{ steps.get-commits-relative-to-target.outputs.commits }}"

      #   name: Send custom JSON data to Slack workflow
      #   id: slack
      # - uses: slackapi/slack-github-action@v1.18.0
      #   with:
      #     # For posting a rich message using Block Kit
      #     payload: |
      #       {
      #         "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
      #         "blocks": [
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
      #             }
      #           },
      #         ]
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      # SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  # Cancel-Previous:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: styfle/cancel-workflow-action@0.9.1
  #       with:
  #         access_token: ${{ github.token }}

  # Install:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: ./.github/actions/deps-restore
  #       id: cache-node-modules

  #     - name: Download dependencies
  #       if: steps.cache-node-modules.outputs.cache-hit != 'true'
  #       run: yarn install --immutable

  # Lint:
  #   needs: Install
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: ./.github/actions/deps-restore
  #     - run: yarn lint

  # Test:
  #   needs: Install
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: ./.github/actions/deps-restore
  #     - run: yarn test

  # Build:
  #   needs: Install
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: ./.github/actions/deps-restore
  #     - uses: ./.github/actions/build-restore
  #       id: cache-build

  #     - name: Create New Build
  #       if: steps.cache-build.outputs.cache-hit != 'true'
  #       run: yarn build

  #     - name: Upload Build Artifact
  #       run: ls -la
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: build-${{ github.sha }}
  #         path: ./build/

  # Download-Artifacts:
  #   needs: Build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/download-artifact@v3
  #     - name: Display structure of downloaded files
  #       run: ls -R

  # Changed-Files:
  #   runs-on: ubuntu-latest # windows-latest | macos-latest
  #   name: Test changed-files
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0 # OR "2" -> To retrieve the preceding commit.

  #     - name: Get changed files
  #       id: changed-files
  #       uses: tj-actions/changed-files@v23.2

  #     - name: List all changed files
  #       run: |
  #         for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
  #           echo "$file was changed"
  #         done

  #     - name: Dump GitHub context
  #       env:
  #         GITHUB_CONTEXT: ${{ toJson(github) }}
  #       run: echo "$GITHUB_CONTEXT"
  #     - name: Dump job context
  #       env:
  #         JOB_CONTEXT: ${{ toJson(job) }}
  #       run: echo "$JOB_CONTEXT"
  #     - name: Dump steps context
  #       env:
  #         STEPS_CONTEXT: ${{ toJson(steps) }}
  #       run: echo "$STEPS_CONTEXT"
  #     - name: Dump runner context
  #       env:
  #         RUNNER_CONTEXT: ${{ toJson(runner) }}
  #       run: echo "$RUNNER_CONTEXT"
  #     - name: Dump strategy context
  #       env:
  #         STRATEGY_CONTEXT: ${{ toJson(strategy) }}
  #       run: echo "$STRATEGY_CONTEXT"
  #     - name: Dump matrix context
  #       env:
  #         MATRIX_CONTEXT: ${{ toJson(matrix) }}
  #       run: echo "$MATRIX_CONTEXT"

  #     - name: Show default environment variables
  #       run: |
  #         echo "The job_id is: $GITHUB_JOB"   # reference the default environment variables
  #         echo "The id of this action is: $GITHUB_ACTION"   # reference the default environment variables
  #         echo "The run id is: $GITHUB_RUN_ID"
  #         echo "The GitHub Actor's username is: $GITHUB_ACTOR"
  #         echo "GitHub SHA: $GITHUB_SHA"

# wait wut
