# Workflow name
name: Pull Request

# Events to trigger this workflow.
on:
  pull_request:
    branches:
      - main

# GH Action ENVS
env:
  cache-name: cache-node-modules

jobs:
  # Saves execution time on the free tier. Non-blocking.
  Cancel-Previous:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

  # Loads the node modeules from cache or downloads them
  Install:
    runs-on: ubuntu-latest

    steps:
      # Get the code from github
      - uses: actions/checkout@v3

      # Create Centralized cache for node_modules and build
      - name: Create Central Cache
        shell: bash
        run: |
          echo "Creating Central Cache"
          mkdir central_cache

      # Load node modules from cache
      - name: Prepare Node Modules
        id: cache-nodemodules
        uses: actions/cache@v2
        with:
          path: central_cache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/src/**') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      # Install dependencies if cache miss
      - name: Install Dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        shell: bash
        run: |
          echo "Cache miss! Installing dependencies"
          npm install
          echo "Copying Dependencies Into Central Cache"
          cp -r node_modules central_cache
          ls central_cache

  # Building
  Build:
    runs-on: ubuntu-latest
    needs:
      - install

    steps:
      - uses: actions/checkout@v3

      # Load node modules and build from cache
      - uses: actions/cache@v2
        id: load-nodemodules-from-cache
        with:
          path: central_cache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
        if: steps.load-nodemodules-from-cache.outputs.cache-hit != 'true'
        # shell: |
        #   echo "NO CACHE HIT"

      # - name: Build
      # - uses: actions/cache@v3
      #   id: cache-build
      # with:
      #     path: build
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}-

      # if: steps.cache-build.outputs.cache-hit != 'true'
      - run: npm run build

  # Linting
  Lint:
    runs-on: ubuntu-latest
    needs:
      - install

    steps:
      - uses: actions/checkout@v3
      # Load node modules from cache
      - uses: actions/cache@v2
        with:
          path: central_cache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - run: npm run lint

  # Unit tests
  Test:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v3
      # Load node modules from cache or download them
      - uses: actions/cache@v2
        with:
          path: central_cache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - run: npm run test

  # Artifact:
  #   # CodeQL runs on ubuntu-latest, windows-latest, and macos-latest
  #   runs-on: ubuntu-latest

  #   permissions:
  #     # required for all workflows
  #     security-events: write

  #     # only required for workflows in private repositories
  #     actions: read
  #     contents: read

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
